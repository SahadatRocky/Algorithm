#include<bits/stdc++.h>
 
using namespace std;
 
#define PF           printf
#define SF(n)        scanf("%d", &n)
#define SFF(a,b)     scanf("%d %d", &a, &b)
#define SFFF(a,b,c)  scanf("%d %d %d", &a, &b, &c)
#define INF_I        2147483647    //max limit
#define INF          1999999999
#define PB           push_back
#define MEM(n, val)  memset((n), val, sizeof(n))
#define F            first
#define S            second
#define FOR(i, a, b) for(int i = a; i <= b; i++)
#define ROF(i, a, b) for(int i = a; i >= b; i--)
#define BOOST        std::ios_base::sync_with_stdio(false);
#define INP          freopen("in.txt", "r", stdin);
#define OUT          freopen("out.txt", "w", stdout);
#define MP           make_pair
#define INIT_RAND    srand(time(NULL))
#define MOD          1000000007
#define MX           (100010)
#define PI           acos(-1.0)
#define eps          .0000000001
 
typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int, int> PII;
typedef pair<long long, long long> PLL;
typedef priority_queue<int> PQ;
typedef queue<int> Q;
typedef stringstream SS;
 
vector<int> adjl[1000];
int col[1000];
int n, m;
int vis[1000];
 
bool bt(int u)    {
    if(u == n + 1)  {
        return 1;
    }
    int col_used[4];
    for(int i = 1; i <= 3; i++)  {
        col_used[i] = 0;
    }
    for(int i = 0; i < adjl[u].size(); i++)   {
        int v = adjl[u][i];
        col_used[ col[v] ] = 1;
    }
    for(int cc = 1; cc <= 3; cc++)  {
        if(col_used[cc] == 0)    {
            col[u] = cc;
            if(bt(u + 1))   {
                return 1;
            }
            col[u] = 0;
        }
    }
    return 0;
    ///vis[u] = 0;
}
 
 
int main()  {
    cin >> n >> m;
    for(int i = 1; i < n; i++)   {
        col[i] = 0;
    }
    for(int i = 1; i <= m; i++)   {
        int u, v;
        cin >> u >> v;
        adjl[u].push_back(v);
        adjl[v].push_back(u);
    }
    if(bt(1) == 0)   {
        ///assuming graph is connected
        cout << "graph can't be colored with 3 color\n";
    }
    else    {
        for(int i = 1; i <= n; i++)   {
            if(col[i] == 1) {
                cout << i << " : " << "green" << "\n";
            }
            else if(col[i] == 2)   {
                cout << i << " : " << "blue" << "\n";
            }
            else    {
                cout << i << " : " << "red" << "\n";
            }
        }
    }
    return 0;
}
/**
inp 1:
4 5
1 2
2 3
1 3
1 4
2 4
inp 2:
4 6
1 2
1 3
1 4
2 3
2 4
3 4
*/
 
